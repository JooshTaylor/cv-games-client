{"version":3,"sources":["games/telestrations/enums/LobbyStatus.ts","shared/contexts/SocketIoContext.ts","shared/utils/axiosFetch.ts","shared/hooks/useFetch.ts","games/telestrations/views/game/TelestrationsRedirectManagerView.tsx","games/telestrations/constants/TelestrationsEvents.ts","games/telestrations/utils/AccountHelper.ts","games/telestrations/views/game/lobby/TelestrationsLobbyView.tsx","games/telestrations/enums/TelestrationsRoundType.ts","games/telestrations/components/draw-word/DrawWord.tsx","games/telestrations/components/guess-word/GuessWord.tsx","games/telestrations/components/select-word/SelectWord.tsx","games/telestrations/views/game/play/TelestrationsPlayView.tsx","games/telestrations/views/game/results/TelestrationsResultsView.tsx","shared/hooks/useQuery.ts","games/telestrations/views/home/TelestrationsHomeView.tsx","games/telestrations/TelestrationsRoutes.tsx","App.tsx","index.tsx"],"names":["LobbyStatus","SocketIoContext","React","createContext","axiosFetch","options","url","method","body","onSuccess","onError","requestOptions","cancelToken","axios","CancelToken","source","token","data","then","res","catch","err","useFetch","fetchOptions","useEffect","error","TelestrationsRedirectManagerView","params","useParams","history","useHistory","useState","lobby","setLobby","id","push","status","WaitingForPlayers","to","InProgress","Complete","TelestrationsEvents","AccountHelper","getPlayerForLobby","lobbyId","account","window","sessionStorage","getItem","JSON","parse","setPlayerForLobby","clearPlayer","setItem","stringify","removeItem","TelestrationsLobbyView","accounts","setAccounts","disableStartButton","setDisableStartButton","socket","useContext","selectedPlayer","availablePlayers","filter","acc","players","find","_acc","emitEventToLobby","eventName","args","emit","updatePlayers","on","off","className","map","player","onClick","selectPlayer","username","deselectPlayer","disabled","TelestrationsRoundType","DrawWord","props","canvasRef","useRef","isPainting","setIsPainting","lastX","setLastX","lastY","setLastY","lineThickness","setLineThickness","lockCanvas","setLockCanvas","current","canvas","ctx","getContext","width","height","fillRect","round","word","ref","onMouseDown","e","fillStyle","pageX","offsetLeft","pageY","offsetTop","onMouseMove","mouseX","mouseY","x1","x2","y1","y2","steep","Math","abs","x","y","dx","de","yStep","newLineThickness","sqrt","onMouseUp","preventDefault","onSubmitDrawing","toDataURL","GuessWord","lockForm","setLockForm","guess","setGuess","alt","src","drawing","style","onSubmit","onGuessWord","placeholder","value","onChange","target","type","SelectWord","selectedWord","setWord","onSelectWord","TelestrationsPlayView","currentPlayer","setRound","currentRound","roundType","undefined","drawingImageUrl","TelestrationsResultsView","playerId","URLSearchParams","useLocation","search","get","playerResults","setPlayerResults","finalRound","TelestrationsHomeView","TelestrationsRoutes","match","useRouteMatch","path","App","serverUrl","defaults","baseURL","io","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.be97400c.chunk.js","sourcesContent":["export enum LobbyStatus {\r\n  WaitingForPlayers = 'WaitingForPlayers',\r\n  InProgress = 'InProgress',\r\n  Complete = 'Complete'\r\n}","import React from 'react';\r\nimport { Socket } from 'socket.io-client';\r\n\r\nexport const SocketIoContext = React.createContext<Socket>(null as any);","import axios, { AxiosRequestConfig } from 'axios';\r\n\r\nexport interface FetchOptions<TResponse = any, TBody = any> {\r\n  url: string;\r\n  method?: 'get' | 'post' | 'put' | 'delete';\r\n  body?: TBody;\r\n  onSuccess?: (data: TResponse) => void;\r\n  onError?: (error: any) => void;\r\n}\r\n\r\nexport const axiosFetch = <TResponse = any, TBody = any>(options: FetchOptions<TResponse, TBody>) => {\r\n  const { url, method = 'get', body, onSuccess, onError } = options;\r\n\r\n  const source = axios.CancelToken.source();\r\n\r\n  const requestOptions: AxiosRequestConfig = {\r\n    method,\r\n    url,\r\n    cancelToken: source.token\r\n  };\r\n\r\n  if (body) {\r\n    requestOptions.data = body;\r\n  }\r\n\r\n  axios(requestOptions)\r\n    .then(res => {\r\n      onSuccess && onSuccess(res.data);\r\n    })\r\n    .catch(err => {\r\n      onError && onError(err);\r\n    });\r\n};","import React from 'react';\r\nimport { axiosFetch, FetchOptions } from '../utils/axiosFetch';\r\n\r\nexport const useFetch = <TResponse = any, TBody = any>(fetchOptions: FetchOptions<TResponse, TBody>) => {\r\n  React.useEffect(() => {\r\n    if (!fetchOptions)\r\n      return;\r\n\r\n    const options: FetchOptions = {\r\n      ...fetchOptions,\r\n      onSuccess: (data: TResponse) => {\r\n        fetchOptions.onSuccess && fetchOptions.onSuccess(data);\r\n      },\r\n      onError: (error: any) => {\r\n        fetchOptions.onError && fetchOptions.onError(error);\r\n      }\r\n    }\r\n\r\n    axiosFetch(options);\r\n  }, [ fetchOptions?.url, fetchOptions?.method ]);\r\n};","import React from 'react';\r\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\r\n\r\nimport { LobbyStatus } from '../../enums/LobbyStatus';\r\n\r\nimport { TelestrationsViewParams } from '../../interfaces/TelestrationsViewParams';\r\nimport { useFetch } from '../../../../shared/hooks/useFetch';\r\nimport { Lobby } from '../../interfaces/Lobby';\r\n\r\nexport function TelestrationsRedirectManagerView(): JSX.Element {\r\n  const params = useParams<TelestrationsViewParams>();\r\n  const history = useHistory();\r\n\r\n  const [ lobby, setLobby ] = React.useState<Lobby>(null as any);\r\n\r\n  useFetch({\r\n    url: `/telestrations/lobby/${params.id}`,\r\n    onSuccess: setLobby,\r\n    onError: () => history.push('/telestrations')\r\n  });\r\n\r\n  if (!lobby?.id)\r\n    return <></>;\r\n\r\n  switch (lobby.status) {\r\n    case LobbyStatus.WaitingForPlayers:\r\n      return <Redirect to={`/telestrations/${params.id}/lobby`} />\r\n    case LobbyStatus.InProgress:\r\n      return <Redirect to={`/telestrations/${params.id}/play`} />\r\n    case LobbyStatus.Complete:\r\n      return <Redirect to={`/telestrations/${params.id}/results`} />\r\n    default:\r\n      return <Redirect to='/telestrations' />;\r\n  }\r\n}","export const TelestrationsEvents = {\r\n  JOIN_LOBBY: 'telestrations:join:lobby',\r\n  STARTING_GAME: 'telestrations:starting:game',\r\n  START_GAME: 'telestrations:start:game',\r\n  UPDATE_LOBBY: 'telestrations:update:lobby'\r\n};","import { Account } from \"../../../shared/interfaces/Account\";\r\n\r\nexport const AccountHelper = {\r\n  getPlayerForLobby(lobbyId: string): Account {\r\n    const account = window.sessionStorage.getItem(`account:${lobbyId}`);\r\n\r\n    if (typeof(account) === 'string')\r\n      return JSON.parse(account);\r\n\r\n    return null as any;\r\n  },\r\n\r\n  setPlayerForLobby(lobbyId: string, account: Account): void {\r\n    AccountHelper.clearPlayer(lobbyId);\r\n    window.sessionStorage.setItem(`account:${lobbyId}`, JSON.stringify(account));\r\n  },\r\n\r\n  clearPlayer(lobbyId: string): void {\r\n    window.sessionStorage.removeItem(`account:${lobbyId}`);\r\n  }\r\n};","import React from 'react';\r\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\r\n\r\nimport { SocketIoContext } from '../../../../../shared/contexts/SocketIoContext';\r\nimport { useFetch } from '../../../../../shared/hooks/useFetch';\r\nimport { Account } from '../../../../../shared/interfaces/Account';\r\nimport { axiosFetch } from '../../../../../shared/utils/axiosFetch';\r\nimport { TelestrationsEvents } from '../../../constants/TelestrationsEvents';\r\nimport { LobbyStatus } from '../../../enums/LobbyStatus';\r\nimport { Lobby } from '../../../interfaces/Lobby';\r\nimport { TelestrationsViewParams } from '../../../interfaces/TelestrationsViewParams';\r\nimport { AccountHelper } from '../../../utils/AccountHelper';\r\n\r\nexport function TelestrationsLobbyView(): JSX.Element {\r\n  const params = useParams<TelestrationsViewParams>();\r\n  const history = useHistory();\r\n\r\n  const [ lobby, setLobby ] = React.useState<Lobby>(null as any);\r\n  const [ accounts, setAccounts ] = React.useState<Account[]>(null as any);\r\n  const [ disableStartButton, setDisableStartButton ] = React.useState(false);\r\n\r\n  const socket = React.useContext(SocketIoContext);\r\n  \r\n  const selectedPlayer = AccountHelper.getPlayerForLobby(lobby?.id);\r\n\r\n  useFetch<Lobby>({\r\n    url: `/telestrations/lobby/${params.id}`,\r\n    onSuccess: setLobby,\r\n    onError: () => history.push('/telestrations')\r\n  });\r\n\r\n  useFetch<Account[]>({\r\n    url: `/accounts`,\r\n    onSuccess: setAccounts\r\n  });\r\n\r\n  const availablePlayers = accounts?.filter(acc => !lobby?.players?.find(_acc => _acc.id === acc.id)) ?? [];\r\n\r\n  const emitEventToLobby = (eventName: string, ...args: any[]) => {\r\n    if (!lobby)\r\n      return;\r\n\r\n    socket.emit(eventName, lobby.id, ...args);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (!socket.id)\r\n      return;\r\n\r\n    socket.on(TelestrationsEvents.STARTING_GAME, () => setDisableStartButton(true));\r\n    socket.on(TelestrationsEvents.UPDATE_LOBBY, setLobby);\r\n\r\n    return () => {\r\n      socket.off(TelestrationsEvents.STARTING_GAME);\r\n      socket.off(TelestrationsEvents.UPDATE_LOBBY);\r\n    };\r\n  }, [socket]);\r\n\r\n  React.useEffect(() => {\r\n    if (!socket.id || !lobby?.id)\r\n      return;\r\n\r\n    socket.emit(TelestrationsEvents.JOIN_LOBBY, lobby.id);\r\n\r\n    socket.on(TelestrationsEvents.START_GAME, () => {\r\n      history.push(`/telestrations/${lobby.id}/play`);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(TelestrationsEvents.START_GAME);\r\n    };\r\n  }, [ socket, lobby?.id ]);\r\n\r\n  function selectPlayer(player: Account): void {\r\n    const body = [player];\r\n\r\n    if (selectedPlayer)\r\n      body.push(selectedPlayer);\r\n\r\n    AccountHelper.setPlayerForLobby(lobby.id, player);\r\n\r\n    updatePlayers(body);\r\n  }\r\n\r\n  function deselectPlayer(player: Account): void {\r\n    if (!selectedPlayer || selectedPlayer.id !== player.id)\r\n      return;\r\n\r\n    AccountHelper.clearPlayer(lobby.id);\r\n\r\n    updatePlayers([player]);\r\n  }\r\n\r\n  function updatePlayers(body: Account[]): void {\r\n    axiosFetch({\r\n      url: `/telestrations/lobby/${lobby.id}/players`,\r\n      method: 'put',\r\n      body,\r\n      onSuccess: (lobby) => {\r\n        setLobby(lobby);\r\n        emitEventToLobby(TelestrationsEvents.UPDATE_LOBBY);\r\n      }\r\n    });\r\n  }\r\n\r\n  function onClickStartGame(): void {\r\n    if (!lobby)\r\n      return;\r\n\r\n    emitEventToLobby(TelestrationsEvents.STARTING_GAME);\r\n\r\n    axiosFetch({\r\n      url: `/telestrations/lobby/${lobby.id}/start`,\r\n      method: 'post'\r\n    });\r\n  }\r\n\r\n  if (!lobby || !accounts)\r\n    return <></>;\r\n\r\n  if (lobby.status !== LobbyStatus.WaitingForPlayers)\r\n    return <Redirect to={`/telestrations/${lobby.id}`} />;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Waiting Room</h1>\r\n\r\n      <div className='row'>\r\n        <div className='col-6'>\r\n          <h2>Select an account</h2>\r\n\r\n          <ul className='list-unstyled d-flex align-items-center flex-wrap'>\r\n            {availablePlayers.map(player => (\r\n              <li key={player.id}>\r\n                <button className='btn btn-link' onClick={() => selectPlayer(player)}>\r\n                  {player.username}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        <div className='col-6'>\r\n          <h2>Players</h2>\r\n\r\n          <ul className='list-unstyled d-flex align-items-center flex-wrap'>\r\n            {lobby.players.map(player => (\r\n              <li key={player.id}>\r\n                <button className='btn btn-link' onClick={() => deselectPlayer(player)}>\r\n                  {player.username}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <button onClick={onClickStartGame} className='btn btn-primary' disabled={disableStartButton}>\r\n          Start Game\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}","export enum TelestrationsRoundType {\r\n  SelectWord = 'SelectWord',\r\n  DrawWord = 'DrawWord',\r\n  GuessWord = 'GuessWord'\r\n}","import React from 'react';\r\nimport { TelestrationsRound } from '../../interfaces/TelestrationsRound';\r\n\r\nimport './canvas.scss';\r\n\r\ninterface DrawWordProps {\r\n  round: TelestrationsRound;\r\n  onSubmitDrawing: (drawingImageUrl: string) => void;\r\n}\r\n\r\nexport function DrawWord(props: DrawWordProps): JSX.Element {\r\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\r\n\r\n  const [ isPainting, setIsPainting ] = React.useState(false);\r\n  const [ lastX, setLastX ] = React.useState(0);\r\n  const [ lastY, setLastY ] = React.useState(0);\r\n  const [ lineThickness, setLineThickness ] = React.useState(1);\r\n\r\n  const [ lockCanvas, setLockCanvas ] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    if (!canvasRef.current)\r\n      return;\r\n\r\n    const canvas = canvasRef.current;\r\n\r\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D\r\n\r\n    canvas.width = canvas.height = 600;\r\n    ctx.fillRect(0, 0, 600, 600);\r\n  }, [canvasRef.current]);\r\n\r\n  function onMouseDown(e: any) {\r\n    if (!canvasRef.current || lockCanvas)\r\n      return;\r\n\r\n    const ctx = canvasRef.current.getContext('2d') as CanvasRenderingContext2D\r\n\r\n    setIsPainting(true);\r\n    ctx.fillStyle = \"#ffffff\";\r\n    setLastX(e.pageX - canvasRef.current.offsetLeft);\r\n    setLastY(e.pageY - canvasRef.current.offsetTop);\r\n  }\r\n\r\n  function onMouseUp(e: any) {\r\n    if (lockCanvas)\r\n      return;\r\n\r\n    setIsPainting(false);\r\n  }\r\n\r\n  function onMouseMove(e: any) {\r\n    if (!canvasRef.current || lockCanvas)\r\n      return;\r\n\r\n    const ctx = canvasRef.current.getContext('2d') as CanvasRenderingContext2D\r\n    if (isPainting) {\r\n      const mouseX = e.pageX - canvasRef.current.offsetLeft;\r\n      const mouseY = e.pageY - canvasRef.current.offsetTop;\r\n\r\n      // find all points between   \r\n      let x1 = mouseX,\r\n          x2 = lastX,\r\n          y1 = mouseY,\r\n          y2 = lastY;\r\n\r\n      let steep = (Math.abs(y2 - y1) > Math.abs(x2 - x1));\r\n      if (steep){\r\n          let x = x1;\r\n          x1 = y1;\r\n          y1 = x;\r\n\r\n          let y = y2;\r\n          y2 = x2;\r\n          x2 = y;\r\n      }\r\n      if (x1 > x2) {\r\n          let x = x1;\r\n          x1 = x2;\r\n          x2 = x;\r\n\r\n          let y = y1;\r\n          y1 = y2;\r\n          y2 = y;\r\n      }\r\n\r\n      let dx = x2 - x1,\r\n          dy = Math.abs(y2 - y1),\r\n          error = 0,\r\n          de = dy / dx,\r\n          yStep = -1,\r\n          y = y1;\r\n      \r\n      if (y1 < y2) {\r\n          yStep = 1;\r\n      }\r\n\r\n      let newLineThickness = 5 - Math.sqrt((x2 - x1) *(x2-x1) + (y2 - y1) * (y2-y1))/10;\r\n    \r\n      if (newLineThickness < 1){\r\n        newLineThickness = 1;   \r\n      }\r\n\r\n      for (let x = x1; x < x2; x++) {\r\n          if (steep) {\r\n              ctx.fillRect(y, x, lineThickness , lineThickness );\r\n          } else {\r\n              ctx.fillRect(x, y, lineThickness , lineThickness );\r\n          }\r\n          \r\n          error += de;\r\n          if (error >= 0.5) {\r\n              y += yStep;\r\n              error -= 1.0;\r\n          }\r\n      }\r\n\r\n      setLastX(mouseX);\r\n      setLastY(mouseY);\r\n      setLineThickness(newLineThickness);\r\n    }\r\n  }\r\n\r\n  function onClickDone(e: any): void {\r\n    e.preventDefault();\r\n\r\n    if (!canvasRef.current)\r\n      return;\r\n\r\n    setLockCanvas(true);\r\n    props.onSubmitDrawing(canvasRef.current.toDataURL());\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>Draw word: {props.round.word}</h2>\r\n\r\n      <canvas\r\n        id=\"canvas\"\r\n        height=\"600\"\r\n        width=\"600\"\r\n        ref={canvasRef}\r\n        onMouseDown={onMouseDown}\r\n        onMouseMove={onMouseMove}\r\n        onMouseUp={onMouseUp}\r\n      >\r\n\r\n      </canvas>\r\n\r\n      <div>\r\n        <button className='btn btn-primary' onClick={onClickDone}>Submit Drawing</button>\r\n      </div>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport { TelestrationsRound } from '../../interfaces/TelestrationsRound';\r\n\r\ninterface GuessWordProps {\r\n  round: TelestrationsRound;\r\n  onGuessWord: (guess: string) => void;\r\n}\r\n\r\nexport function GuessWord(props: GuessWordProps): JSX.Element {\r\n  const [ lockForm, setLockForm ] = React.useState(!!props.round.word);\r\n  const [ guess, setGuess ] = React.useState(props.round.word ?? '');\r\n\r\n  function onSubmit(e: React.FormEvent): void {\r\n    e.preventDefault();\r\n\r\n    setLockForm(true);\r\n    props.onGuessWord(guess);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        {lockForm\r\n          ? <>Guess submitted! Waiting for other players...</>\r\n          : <>Guess the title of this drawing!</>\r\n        }\r\n      </h2>\r\n\r\n      <img alt='' src={props.round.drawing} style={{ width: '600px', height: '600px' }} />\r\n\r\n      <form onSubmit={onSubmit}>\r\n        <div className='form-group pb-3'>\r\n          <input\r\n            className='form-control'\r\n            placeholder='Enter your guess here...'\r\n            value={guess}\r\n            onChange={e => setGuess(e.target.value)}\r\n            disabled={lockForm}\r\n          />\r\n        </div>\r\n\r\n        <div className='form-group'>\r\n          <button className='btn btn-primary' type='submit' disabled={lockForm}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\n\r\ninterface SelectWordProps {\r\n  selectedWord: string;\r\n  onSelectWord: (word: string) => void;\r\n}\r\n\r\nexport function SelectWord(props: SelectWordProps): JSX.Element {\r\n  const [ lockForm, setLockForm ] = React.useState(!!props.selectedWord);\r\n  const [ word, setWord ] = React.useState(props.selectedWord);\r\n\r\n  function onSubmit(e: React.FormEvent): void {\r\n    e.preventDefault();\r\n\r\n    setLockForm(true);\r\n\r\n    props.onSelectWord(word);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {lockForm\r\n          ? <>Your word is \"{word}\"! Waiting for other players...</>\r\n          : <>Select your word</>\r\n        }\r\n      </h1>\r\n\r\n      <form onSubmit={onSubmit}>\r\n        <div className='form-group pb-3'>\r\n          <input\r\n            className='form-control'\r\n            placeholder='Enter your word...'\r\n            value={word}\r\n            onChange={e => setWord(e.target.value)}\r\n            disabled={lockForm}\r\n          />\r\n        </div>\r\n\r\n        <div className='form-group'>\r\n          <button type='submit' className='btn btn-primary' disabled={lockForm}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\r\nimport { SocketIoContext } from '../../../../../shared/contexts/SocketIoContext';\r\nimport { useFetch } from '../../../../../shared/hooks/useFetch';\r\nimport { axiosFetch } from '../../../../../shared/utils/axiosFetch';\r\nimport { DrawWord } from '../../../components/draw-word/DrawWord';\r\nimport { GuessWord } from '../../../components/guess-word/GuessWord';\r\nimport { SelectWord } from '../../../components/select-word/SelectWord';\r\nimport { TelestrationsEvents } from '../../../constants/TelestrationsEvents';\r\nimport { LobbyStatus } from '../../../enums/LobbyStatus';\r\nimport { TelestrationsRoundType } from '../../../enums/TelestrationsRoundType';\r\nimport { Lobby } from '../../../interfaces/Lobby';\r\nimport { TelestrationsRound } from '../../../interfaces/TelestrationsRound';\r\n\r\nimport { TelestrationsViewParams } from '../../../interfaces/TelestrationsViewParams';\r\nimport { AccountHelper } from '../../../utils/AccountHelper';\r\n\r\nexport function TelestrationsPlayView(): JSX.Element {\r\n  const params = useParams<TelestrationsViewParams>();\r\n  const history = useHistory();\r\n\r\n  const currentPlayer = AccountHelper.getPlayerForLobby(params.id);\r\n\r\n  const [ lobby, setLobby ] = React.useState<Lobby>(null as any);\r\n  const [ word, setWord ] = React.useState<string>();\r\n  const [ round, setRound ] = React.useState<TelestrationsRound>(null as any);\r\n\r\n  const socket = React.useContext(SocketIoContext);\r\n\r\n  useFetch<Lobby>({\r\n    url: `/telestrations/lobby/${params.id}`,\r\n    onSuccess: setLobby,\r\n    onError: () => history.push('/telestrations')\r\n  });\r\n\r\n  useFetch<string>({\r\n    url: `/telestrations/lobby/${params.id}/players/${currentPlayer.id}/word`,\r\n    onSuccess: setWord,\r\n    onError: () => setWord('')\r\n  });\r\n\r\n  useFetch<TelestrationsRound>(lobby && {\r\n    url: `/telestrations/lobby/${lobby.id}/round/${lobby.currentRound}?playerId=${currentPlayer.id}`,\r\n    onSuccess: setRound\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (!socket.id)\r\n      return;\r\n\r\n    socket.on(TelestrationsEvents.UPDATE_LOBBY, setLobby);\r\n\r\n    return () => {\r\n      socket.off(TelestrationsEvents.UPDATE_LOBBY);\r\n    };\r\n  }, [socket]);\r\n\r\n  function onSelectWord(word: string): void {\r\n    setWord(word);\r\n\r\n    axiosFetch({\r\n      url: `/telestrations/lobby/${params.id}/players/${currentPlayer.id}/word`,\r\n      method: 'post',\r\n      body: { word }\r\n    });\r\n  }\r\n\r\n  function onSubmitDrawing(drawingImageUrl: string): void {\r\n    axiosFetch({\r\n      url: `/telestrations/lobby/${params.id}/players/${currentPlayer.id}/round/${lobby.currentRound}/drawing`,\r\n      method: 'post',\r\n      body: { drawing: drawingImageUrl }\r\n    });\r\n  }\r\n\r\n  function onGuessWord(guess: string): void {\r\n    axiosFetch({\r\n      url: `/telestrations/lobby/${params.id}/players/${currentPlayer.id}/round/${lobby.currentRound}/guess`,\r\n      method: 'post',\r\n      body: { guess }\r\n    });\r\n  }\r\n\r\n  if (!round)\r\n    return <></>;\r\n\r\n  if (lobby.status !== LobbyStatus.InProgress)\r\n    return <Redirect to={`/telestrations/${lobby.id}`} />;\r\n\r\n  switch (round.roundType) {\r\n    case TelestrationsRoundType.SelectWord: {\r\n      if (word === undefined)\r\n        return <></>;\r\n\r\n      return <SelectWord onSelectWord={onSelectWord} selectedWord={word} />;\r\n    }\r\n\r\n    case TelestrationsRoundType.DrawWord: {\r\n      return <DrawWord round={round} onSubmitDrawing={onSubmitDrawing} />;\r\n    }\r\n\r\n    case TelestrationsRoundType.GuessWord: {\r\n      return <GuessWord round={round} onGuessWord={onGuessWord} />;\r\n    }\r\n\r\n    default: {\r\n      return <Redirect to={`/telestrations/${lobby.id}`} />;\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\r\nimport { useFetch } from '../../../../../shared/hooks/useFetch';\r\nimport { useQuery } from '../../../../../shared/hooks/useQuery';\r\nimport { LobbyStatus } from '../../../enums/LobbyStatus';\r\nimport { TelestrationsRoundType } from '../../../enums/TelestrationsRoundType';\r\nimport { Lobby } from '../../../interfaces/Lobby';\r\nimport { TelestrationsResult } from '../../../interfaces/TelestrationsResult';\r\n\r\nimport { TelestrationsViewParams } from '../../../interfaces/TelestrationsViewParams';\r\nimport { AccountHelper } from '../../../utils/AccountHelper';\r\n\r\nexport function TelestrationsResultsView(): JSX.Element {\r\n  const params = useParams<TelestrationsViewParams>();\r\n  const history = useHistory();\r\n  const queryParams = useQuery();\r\n\r\n  const playerId = queryParams.get('playerId') ?? AccountHelper.getPlayerForLobby(params.id).id;\r\n\r\n  const [ lobby, setLobby ] = React.useState<Lobby>(null as any);\r\n  const [ playerResults, setPlayerResults ] = React.useState<TelestrationsResult>(null as any);\r\n\r\n  useFetch<Lobby>({\r\n    url: `/telestrations/lobby/${params.id}`,\r\n    onSuccess: setLobby,\r\n    onError: () => history.push('/telestrations')\r\n  });\r\n\r\n  useFetch<TelestrationsResult>(lobby && {\r\n    url: `/telestrations/lobby/${params.id}/players/${playerId}/results`,\r\n    onSuccess: setPlayerResults\r\n  });\r\n\r\n  if (!lobby)\r\n    return <></>;\r\n\r\n  if (lobby.status !== LobbyStatus.Complete)\r\n    return <Redirect to={`/telestrations/${lobby.id}`} />;\r\n\r\n  if (!playerResults)\r\n    return <></>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Showing results for: {playerResults.player.username}</h1>\r\n\r\n      <p className='h6'>Your original word was: {playerResults.word}</p>\r\n\r\n      {playerResults.finalRound.roundType === TelestrationsRoundType.DrawWord\r\n        ? (\r\n          <div>\r\n            <p>Here's the final drawing:</p>\r\n            <img alt='' src={playerResults.finalRound.drawing} />\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <p>The final guess for this word was: {playerResults.finalRound.word}</p>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}","import { useLocation } from 'react-router-dom';\r\n\r\nexport function useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { axiosFetch } from '../../../../shared/utils/axiosFetch';\r\nimport { Lobby } from '../../interfaces/Lobby';\r\n\r\nexport function TelestrationsHomeView(): JSX.Element {\r\n  const history = useHistory();\r\n\r\n  function onClickCreateLobby(): void {\r\n    axiosFetch<Lobby>({\r\n      url: '/telestrations/lobby',\r\n      method: 'post',\r\n      onSuccess: lobby => history.push(`/telestrations/${lobby.id}/lobby`)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Telestrations</h1>\r\n\r\n      <div className='row'>\r\n        <div className='col-6'>\r\n          <h2 className='h5'>Start a new lobby</h2>\r\n\r\n          <button className='btn btn-primary' onClick={onClickCreateLobby}>Create Lobby</button>\r\n        </div>\r\n\r\n        <div className='col-6'>\r\n          <h2 className='h5'>Join a game</h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useRouteMatch, Switch, Route } from 'react-router-dom';\r\n\r\nimport { TelestrationsRedirectManagerView } from './views/game/TelestrationsRedirectManagerView';\r\nimport { TelestrationsLobbyView } from './views/game/lobby/TelestrationsLobbyView';\r\nimport { TelestrationsPlayView } from './views/game/play/TelestrationsPlayView';\r\nimport { TelestrationsResultsView } from './views/game/results/TelestrationsResultsView';\r\nimport { TelestrationsHomeView } from './views/home/TelestrationsHomeView';\r\n\r\nexport function TelestrationsRoutes(): JSX.Element {\r\n  const match = useRouteMatch();\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path={`${match.path}/:id/lobby`}>\r\n          <TelestrationsLobbyView />\r\n        </Route>\r\n        <Route path={`${match.path}/:id/play`}>\r\n          <TelestrationsPlayView />\r\n        </Route>\r\n        <Route path={`${match.path}/:id/results`}>\r\n          <TelestrationsResultsView />\r\n        </Route>\r\n        <Route path={`${match.path}/:id`}>\r\n          <TelestrationsRedirectManagerView />\r\n        </Route>\r\n\r\n        <Route path={match.path}>\r\n          <TelestrationsHomeView />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom';\r\nimport { TelestrationsRoutes } from './games/telestrations/TelestrationsRoutes';\r\n\r\nexport function App(): JSX.Element {\r\n  return (\r\n    <div className='container-fluid'>\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/telestrations'>\r\n            <TelestrationsRoutes />\r\n          </Route>\r\n          {/* TODO: Update to show a game selector view when there are more games than just telestrations */}\r\n          <Route path='/'>\r\n            <TelestrationsRoutes />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client';\r\n\r\nimport { SocketIoContext } from './shared/contexts/SocketIoContext';\r\n\r\nimport './styles.scss';\r\n\r\nimport { App } from './App';\r\n\r\nconst serverUrl = process.env.NODE_ENV === 'development'\r\n  ? 'http://localhost:4000'\r\n  : 'https://cv-games-api.herokuapp.com';\r\n\r\naxios.defaults.baseURL = `${serverUrl}/api`;\r\n\r\nconst socket = io(serverUrl);\r\n\r\nsocket.on('connect', () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <SocketIoContext.Provider value={socket}>\r\n        <App />\r\n      </SocketIoContext.Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n});"],"sourceRoot":""}